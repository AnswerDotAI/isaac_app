"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/todo.ipynb.

# %% auto 0
__all__ = ['api', 'ar', 'status_opts', 'populate_todos', 'update_status', 'index']

# %% ../nbs/todo.ipynb 2
from fasthtml.common import *
from functools import partial
from fasthtml.jupyter import *
from monsterui.all import *
import ast, os
from ghapi.all import GhApi
from datetime import datetime, timedelta

api = GhApi(token=os.environ['GITHUB_TOKEN'])

# %% ../nbs/todo.ipynb 3
ar = APIRouter(prefix='todo')

# %% ../nbs/todo.ipynb 4
def populate_todos(n_days=30):
    me = api.users.get_authenticated()
    username = me.login
    
    time_range = (datetime.now() - timedelta(days=n_days)).strftime('%Y-%m-%d')
    watched_repos = [o.full_name for o in api.activity.list_repos_watched_by_user(username)]
    watched_issues = api.search.issues_and_pull_requests(q=f'repo:{" repo:".join(watched_repos)} state:open updated:>={time_range}')
    involved_issues = api.search.issues_and_pull_requests(q=f'involves:{username} state:open updated:>={time_range}')
    
    for search_result in (watched_issues, involved_issues):
        for item in search_result['items']:
            db.todos.update(
                GitHubIssue(
                    id=item['id'], 
                    title=item['title'],
                    updated_at=item['updated_at'],
                    labels=','.join(label['name'] for label in item['labels']),
                    repo_url=item['repository_url'],
                    html_url=item['html_url'],
                    repo_owner=item['repository_url'].split('/')[-2],
                    repo_name=item['repository_url'].split('/')[-1],
                    number=item['number']))

# %% ../nbs/todo.ipynb 5
status_opts = ("Todo", "In Progress", "Done", "Archived", "Someday", "Other")

# %% ../nbs/todo.ipynb 6
@ar    
def update_status(id:str, new_status:str): 
    db.todos.upsert(GitHubIssue(id=id, status=new_status))
    return index()

# %% ../nbs/todo.ipynb 7
@ar
def index():
    populate_todos()
    cutoff = (datetime.now() - timedelta(days=180)).strftime('%Y-%m-%dT%H:%M:%SZ')
    base_query = f'updated_at>=?'
    
    # Get all items without status first
    def _todos(s): return db.todos('updated_at>=? and status=?', [cutoff, s])
    unassigned = db.todos(f'updated_at>=? AND status IS NULL', [cutoff])
    
    
    return Container(
#         Section(H2("Unassigned"), Grid(*unassigned, cols_max=3)) if unassigned else None,
        Section(
            Grid(
                Div(H2("Todo"),        *_todos('Todo'),        cls='space-y-3'), 
                Div(H2("In Progress"), *_todos('In Progress'), cls='space-y-3'), 
                Div(H2("Done"),        *_todos('Done'),        cls='space-y-3'))),
        Section(Details(Summary("Someday"), Grid(*_todos('Someday'), cols_max=3))),   
        Section(Details(Summary("Other"),   Grid(*_todos('Other'),   cols_max=3))),   
        Section(Details(Summary("Archived"),Grid(*_todos('Archived'),cols_max=3))))
